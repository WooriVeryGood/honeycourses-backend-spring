# 동작 조건 설정 : main 브랜치에 push가 발생할 경우 동작한다.
on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          arguments: build

      - name: 테스트 커버리지를 PR에 코멘트로 등록합니다
        id: jacoco
        uses: madrapps/jacoco-report@v1.2
        with:
          title: 📝 테스트 커버리지 리포트입니다
          paths: ${{ github.workspace }}/backend/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-prod .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-prod

  # 위 이미지를 pull해서 ec2에서 실행
  run-docker-image-on-ec2-prod:
    if: github.ref == 'refs/heads/main'
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image-prod
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-prod

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop github-actions-demo 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 80:8080 ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-prod

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f

  build-docker-image-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION_DEV_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          arguments: build

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-dev .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-dev

  run-docker-image-on-ec2-dev:
    if: github.ref == 'refs/heads/dev'
    needs: build-docker-image-dev
    runs-on: self-hosted

    steps:
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-dev

      - name: docker stop container
        run: sudo docker stop dev-server 2>/dev/null || true

      - name: docker run new container
        run: sudo docker run --name dev-server --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/honeycourses-backend-spring-dev

      - name: delete old docker image
        run: sudo docker system prune -f